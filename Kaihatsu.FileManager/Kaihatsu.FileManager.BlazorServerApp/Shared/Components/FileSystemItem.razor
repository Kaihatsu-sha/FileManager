@using Kaihatsu.FileManager.Core.Abstraction;
@using Kaihatsu.FileManager.Core.Abstraction.Services;
@using Kaihatsu.FileManager.Business;
@inject OperationsFactory facroty

<tr id="@Item.Name" class="">
    @if (Item.Type == FileType.Folder)
    {
        <td>Folder</td>
        <td><button @onclick="(()=>OpenDirectory(Item.FullPath) )">@Item.Name</button></td>
        <td>-</td>
        <td>@Item.CreationTime</td>
        <td>@Item.LastWriteTime</td>
        <td @onclick="(()=>ToggleOperationMenu(Item.Name) )">@OperationMenuText</td>
    }
    else
    {
        <td>File</td>
        <td>@Item.Name</td>
        <td>@Item.Size</td>
        <td>@Item.CreationTime</td>
        <td>@Item.LastWriteTime</td>
        <td @onclick="(()=>ToggleOperationMenu(Item.Name) )">@OperationMenuText</td>

    }

</tr>
<tr class="@OperationMenuCssClass">
    <td colspan="6">
        <div>
            <span>@_fileNameFactory</span>
            <br />
            <button class="btn" @onclick="@Delete" >Delete</button>
            <div>
                <div class="@MoveDivCssClass">
                    <br/>
                    <input @bind-value="@_moveInput"/>
                </div>
                <button class="btn" @onclick="@Move" >Move</button>
            </div>
            <div>
                <div class="@RenameDivCssClass">
                    <br/>
                    <input @bind-value="@_moveInput"/>
                </div>
                <button class="btn" @onclick="@Rename">Rename</button>
            </div>
            <div>
                <div class="@CopyDivCssClass">
                    <br/>
                    <input @bind-value="@_moveInput"/>
                </div>
                <button class="btn" @onclick="@Copy">Copy</button>
            </div>
        </div>
    </td>
</tr>


@code
{
    private IOperationsFactoryService _operationsFactory;
    private string _fileNameFactory = "";
    private bool _collapseTableRow = false;
    private bool _collapseOperationMenu = true;
    private bool _collapseMoveDiv = true;
    private bool _collapseCopyDiv = true;
    private bool _collapseRenameDiv = true;
    private string _moveInput;


    private string? OperationMenuCssClass => _collapseOperationMenu ? "collapse" : null;
    private string? TableRowCssClass => _collapseTableRow ? "collapse" : null;
    private string OperationMenuText => _collapseTableRow ? "Отменить" : "Выбрать";
    private string? MoveDivCssClass => _collapseMoveDiv ? "collapse" : null;//FIX: Блокировать другие варианты при открытии!!!
    private string? CopyDivCssClass => _collapseCopyDiv ? "collapse" : null;
    private string? RenameDivCssClass => _collapseRenameDiv ? "collapse" : null;

    [Parameter]
    public FileInfoBase Item { get; set; }
    [Parameter]
    public EventCallback<string> OnOpenDirectoryCallback { get; set; }
    [Parameter]
    public EventCallback UpdateCallback { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //FIX: При переходе выше или назад отображается открытый элемент!!!
        //FIX: Не сбрасываются переменные!!!
    }

    private void ToggleOperationMenu(string name)
    {
        _collapseOperationMenu = !_collapseOperationMenu;
        _collapseTableRow = !_collapseTableRow;

        _operationsFactory = null;
        _operationsFactory = facroty.CreateFactory(Item);
        _fileNameFactory = Item.Name;
        //_operationsFactory = facroty.CreateFactory(_fileInfo.First(p => p.Name == name));
        //_fileNameFactory = _fileInfo.First(p => p.Name == name).FullPath;

        //JsRuntime.InvokeVoidAsync("displayAlert");
        //JsRuntime.InvokeVoidAsync("onBlazorReady");

    }

    private void OpenDirectory(string path)
    {
        OnOpenDirectoryCallback.InvokeAsync(path);
    }

    private void Delete()//FIX: При удалении меню операций открывается у следующего элемента!!!
    {
        _operationsFactory.Delete();
        UpdateCallback.InvokeAsync();
    }

    private void Move()
    {
        if(_collapseMoveDiv)//Шаг 1: Отображаем input для ввода пути
        {
            _collapseMoveDiv = !_collapseMoveDiv;
            return;
        }

        //Шаг 2: подтверждаем ввод пути
        if(_moveInput.Length > 1)
        {
            _operationsFactory.Move(_moveInput);
            //_collapseMoveDiv = !_collapseMoveDiv;  
            UpdateCallback.InvokeAsync();
        }
    }

    private void Copy()
    {
        if(_collapseCopyDiv)//Шаг 1: Отображаем input для ввода пути
        {
            _collapseCopyDiv = !_collapseCopyDiv;
            return;
        }

        //Шаг 2: подтверждаем ввод пути
        if(_moveInput.Length > 1)
        {
            _operationsFactory.Copy(_moveInput);
            //_collapseMoveDiv = !_collapseMoveDiv;  
            UpdateCallback.InvokeAsync();
        }
    }

    private void Rename()
    {
        if(_collapseRenameDiv)//Шаг 1: Отображаем input для ввода пути
        {
            _collapseRenameDiv = !_collapseRenameDiv;
            return;
        }

        //Шаг 2: подтверждаем ввод пути
        if(_moveInput.Length > 1)
        {
            _operationsFactory.Rename(_moveInput);
            //_collapseMoveDiv = !_collapseMoveDiv;  
            UpdateCallback.InvokeAsync();
        }
    }
}
