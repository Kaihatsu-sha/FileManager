@page "/folderview"
<PageTitle>PageTitle</PageTitle>

@using Kaihatsu.FileManager.Core.Abstraction.Services
@using Kaihatsu.FileManager.Core.Abstraction;
@using Kaihatsu.FileManager.Business;
@using Kaihatsu.FileManager.BlazorServerApp.Shared.Components;
@inject INavigationService navigationService


<h3>FolderView</h3>

@if (_fileInfo == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if(_canTheUp)
    {
        <button class="btn" @onclick="GoUp">Parent</button>
    }
    <span>--//--</span>
    @if (_canOpenPrevious)
    {
        <button @onclick="OpenPrevious">Back</button>
    }
    <br/>
    <input id="inputPath" value="@_currentPath"/>
    <br/>

    <br/>
    <input type="text" @bind-value="@_newItemName"/>
    <button @onclick="CreateFolder">Folder</button>
    <button @onclick="CreateFile">File</button>
    <br/>

    <table class="table">
        <thead>
            <tr>
                <th>Тип</th>
                <th>Имя</th>
                <th>Размер KB</th>
                <th>Дата создания</th>
                <th>Дата изменения</th>
                <th>Доп. опции</th>
            </tr>
        </thead>
        <tbody> 
            @foreach (var forecast in _fileInfo)
            {
                <FileSystemItem Item="@forecast" 
                OnOpenDirectoryCallback="@OpenDirectory"
                UpdateCallback="@Reset"></FileSystemItem>            
            }
        </tbody>
    </table>
}

@code 
{
    private IEnumerable<FileInfoBase>? _fileInfo;
    private string _currentPath = "";
    private bool _canTheUp = false;
    private bool _canOpenPrevious = false;
    private string? _newItemName;

    protected override async Task OnInitializedAsync()
    {
        OpenDirectory(null);
    }

    private void Reset()
    {
        _fileInfo = null;
        _canOpenPrevious = navigationService.CanOpenPrevious;
        _canTheUp = navigationService.CanTheUp;
        _fileInfo = navigationService.GetAllFromCurrentDirection();
        _currentPath = navigationService.Path;
    }

    private async Task OpenDirectory(string path)
    {
        if (navigationService.CheckingPath(path))
        {
            Reset();
        }
        //Сообщение об ошибке
    }

    private async Task GoUp()
    {
        navigationService.GoUp();
        Reset();
    }

    private async Task OpenPrevious()
    {
        navigationService.OpenPrevious();        
        Reset();        
    }

    private void CreateFolder()
    {
        //FIX: Не сбрасываются переменная назавния!!!
        DirectoryInfo current = new DirectoryInfo(_currentPath);
        current.CreateSubdirectory(_newItemName);
        Reset();
    }

    private void CreateFile()
    {
        //FIX: Не сбрасываются переменная назавния!!!
        string path = System.IO.Path.Combine(_currentPath, _newItemName);
        File.Create(path);
        Reset();
        //FileInfo file = new FileInfo(_currentPath + "\\" + _newItemName);   
    }

}
